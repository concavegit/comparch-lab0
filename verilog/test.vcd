$date
	Fri Sep 21 18:35:16 2018
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module fulladder4bit_tb $end
$var wire 4 ! sum [3:0] $end
$var wire 1 " overflow $end
$var wire 1 # carryout $end
$var reg 4 $ a [3:0] $end
$var reg 4 % b [3:0] $end
$scope module add $end
$var wire 4 & a [3:0] $end
$var wire 4 ' b [3:0] $end
$var wire 1 " overflow $end
$var wire 4 ( sum [3:0] $end
$var wire 1 # carryout $end
$var wire 1 ) carry2 $end
$var wire 1 * carry1 $end
$var wire 1 + carry0 $end
$scope module add0 $end
$var wire 1 , a $end
$var wire 1 - b $end
$var wire 1 * carry $end
$var wire 1 . sum0 $end
$var wire 1 / sum $end
$var wire 1 0 carry1 $end
$var wire 1 1 carry0 $end
$var wire 1 + c $end
$scope module h0 $end
$var wire 1 , a $end
$var wire 1 - b $end
$var wire 1 1 carry $end
$var wire 1 . sum $end
$upscope $end
$scope module h1 $end
$var wire 1 . a $end
$var wire 1 0 carry $end
$var wire 1 / sum $end
$var wire 1 + b $end
$upscope $end
$upscope $end
$scope module add1 $end
$var wire 1 2 a $end
$var wire 1 3 b $end
$var wire 1 * c $end
$var wire 1 ) carry $end
$var wire 1 4 sum0 $end
$var wire 1 5 sum $end
$var wire 1 6 carry1 $end
$var wire 1 7 carry0 $end
$scope module h0 $end
$var wire 1 2 a $end
$var wire 1 3 b $end
$var wire 1 7 carry $end
$var wire 1 4 sum $end
$upscope $end
$scope module h1 $end
$var wire 1 4 a $end
$var wire 1 * b $end
$var wire 1 6 carry $end
$var wire 1 5 sum $end
$upscope $end
$upscope $end
$scope module add2 $end
$var wire 1 8 a $end
$var wire 1 9 b $end
$var wire 1 ) c $end
$var wire 1 # carry $end
$var wire 1 : sum0 $end
$var wire 1 ; sum $end
$var wire 1 < carry1 $end
$var wire 1 = carry0 $end
$scope module h0 $end
$var wire 1 8 a $end
$var wire 1 9 b $end
$var wire 1 = carry $end
$var wire 1 : sum $end
$upscope $end
$scope module h1 $end
$var wire 1 : a $end
$var wire 1 ) b $end
$var wire 1 < carry $end
$var wire 1 ; sum $end
$upscope $end
$upscope $end
$scope module half $end
$var wire 1 > a $end
$var wire 1 ? b $end
$var wire 1 + carry $end
$var wire 1 @ sum $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
x@
1?
1>
x=
x<
x;
x:
09
08
x7
x6
x5
x4
13
12
x1
x0
x/
x.
1-
0,
x+
x*
x)
bx (
b111 '
b101 &
b111 %
b101 $
x#
x"
bx !
$end
#50
bx0 !
bx0 (
0@
1+
1.
01
04
17
0:
0=
#100
bx00 !
bx00 (
0/
10
06
1)
0<
#150
1*
b1x00 !
b1x00 (
1;
0#
#200
b1100 !
b1100 (
15
1"
#600
0?
19
02
18
b1110 %
b1110 '
b1001 $
b1001 &
#650
b1101 !
b1101 (
1@
0+
14
07
1=
#700
00
1/
b1011 !
b1011 (
05
16
0)
1#
#750
0*
1)
b11 !
b11 (
0;
#800
15
06
b1111 !
b1111 (
1;
0"
#850
0)
#900
b111 !
b111 (
0;
1"
#1200
1?
09
1,
b111 %
b111 '
b1011 $
b1011 &
#1250
b110 !
b110 (
0@
1+
1:
0=
0.
11
#1300
b1110 !
b1110 (
1;
0#
1*
#1350
0"
b1010 !
b1010 (
05
16
#1400
1)
#1450
b10 !
b10 (
0;
1<
1"
#1500
1#
#1550
0"
#1800
0?
0-
19
0,
12
08
b1100 %
b1100 '
b101 $
b101 &
#1850
b11 !
b11 (
1@
0+
01
04
17
#1900
0/
0*
b101 !
b101 (
15
06
#1950
b1 !
b1 (
05
#2400
